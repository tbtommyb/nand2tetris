// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    // Store ALU output or new instruction?
    Mux16(a=instruction, b=ALUout, sel=isCInstruction, out=AInMuxOut);

    Or(a=isAInstruction, b=instruction[5], out=loadA);
    ARegister(in=AInMuxOut, load=loadA, out=A, out[0..14]=addressM);

    // Select between A and M
    And(a=isCInstruction, b=instruction[12], out=AMsel);
    Mux16(a=A, b=inM, sel=AMsel, out=AM);

    // Store anything in D?
    And(a=isCInstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=D);

    ALU(x=D, y=AM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        zr=ZRout, ng=NGout, out=ALUout, out=outM);

    // Write to M?
    And(a=isCInstruction, b=instruction[3], out=writeM);

    // check j bits accord with ALU output flags to set PC load or increment
    // j1 & ng
    And(a=isCInstruction, b=instruction[2], out=jlt);
    And(a=jlt, b=NGout, out=jltJumpOut);

    // j2 & zr
    And(a=isCInstruction, b=instruction[1], out=jeq);
    And(a=jeq, b=ZRout, out=jeqJumpOut);

    // j3 & (!ng | zr)
    And(a=isCInstruction, b=instruction[0], out=jgt);
    Not(in=NGout, out=isPositive);
    Not(in=ZRout, out=notZero);
    And(a=isPositive, b=notZero, out=isGreaterThan);
    And(a=jgt, b=isGreaterThan, out=jgtJumpOut);

    Or(a=jltJumpOut, b=jeqJumpOut, out=jle);
    Or(a=jle, b=jgtJumpOut, out=shouldJump);
    And(a=isCInstruction, b=shouldJump, out=shouldLoad);
    Not(in=shouldLoad, out=shouldIncr);

    PC(in=A, reset=reset, load=shouldLoad, inc=shouldIncr, out[0..14]=pc);

}
