// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int size, f_maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength < 0) {
        do Sys.error(14);
      }

      let size = 0;
      let f_maxLength = maxLength + 1; // 0-terminated string
      let str = Array.new(f_maxLength);

      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do str.dispose();
      do Memory.deAlloc(this);

      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if ((j < 0) | (j > (size - 1))) {
        do Sys.error(15);
      }
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j < 0) | (j > (size - 1))) {
        do Sys.error(16);
      }

      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (size = f_maxLength) {
        do Sys.error(17);
      }

      let str[size] = c;
      let size = size + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (size = 0) {
        do Sys.error(18);
      }

      let size = size - 1;
      let str[size] = 0;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var boolean isNegative;
      var int i, number, digit;

      let number = 0;
      let i = 0;

      while (i < size) {
        if (str[i] = 45) {
          let isNegative = true;
        } else {
          let digit = str[i] - 48;
          let number = (number * 10) + digit;
        }

        let i = i + 1;
      }

      if (isNegative) {
        let number = -number;
      }
      return number;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int digit, exponent;

      let size = 0;

      if (val < 0) {
        let val = -val;
        do appendChar(45);
      }

      while (val > 0) {
        let exponent = 1;
        let digit = val;

        while (digit > 9) {
          if (size = f_maxLength) {
            do Sys.error(19);
          }

          let digit = digit / 10;
          let exponent = exponent * 10;
        }

        let val = val - (exponent * digit);
        do appendChar(digit + 48);
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
