// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int twoToThe;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0]  = 1;
      let twoToThe[1]  = 2;
      let twoToThe[2]  = 4;
      let twoToThe[3]  = 8;
      let twoToThe[4]  = 16;
      let twoToThe[5]  = 32;
      let twoToThe[6]  = 64;
      let twoToThe[7]  = 128;
      let twoToThe[8]  = 256;
      let twoToThe[9]  = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384 + 16384;
      return;
    }

    /** Returns the value of x at bit i. */
    function boolean bit(int x, int i) {
      return (x & twoToThe[i]) > 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      } else {
        return x;
      }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;

      let sum = 0;
      let shiftedX = x;
      let j = 0;

      if (x < 0) {
        return -Math.multiply(-x, y);
      }

      if (y < 0) {
        return -Math.multiply(x, -y);
      }

      while (j < 16) {
        if (Math.bit(y, j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var boolean negX, negY;
      var int q, result;

      let negX = x < 0;
      let negY = y < 0;
      let x = Math.abs(x);
      let y = Math.abs(y);

      if (y > x) {
        return 0;
      }

      let q = Math.divide(x, (2 * y));
      if ((x - (2 * q * y)) < y) {
        let result = 2 * q;
      } else {
        let result = (2 * q) + 1;
      }

      if (negX = negY) {
        return result;
      }
      return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, guess, guessSquared;

      let y = 0;
      let j = 7;
      while (~(j < 0)) {
        let guess = y + twoToThe[j];
        let guessSquared = guess * guess;

        if (~(guessSquared > x) & (guessSquared > 0)) {
          let y = guess;
        }

        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a < b) {
        return b;
      }
      return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }
}
